@inject IJSRuntime JsRuntime
@if (Campaign != null)
{
	<MatDialogTitle style="display: flex; align-items: center;">
		<div style="flex: 1;">Neues vom @Campaign.Date.ToString("dd.MM.yyyy")</div>
	</MatDialogTitle>
	<MatDialogContent>

		<p style="white-space: pre-line; text-align: left;">@Campaign.Text</p>
		@if (Campaign.Links is not null)
		{
			<h3>Links</h3>
			<ul>
				@foreach (var lnk in Campaign.Links)
				{
					<li><a href="@lnk.uri.ToString()" target="_blank">@lnk.text</a></li>
				}
			</ul>
		}
		<p style="white-space: pre-line">
			Wenn dir meine Arbeit gefällt, kauf mir doch gerne ein Bierchen :)
			Vielen Dank an alle Unterstützerinnen!
		</p>



	</MatDialogContent>
	<MatDialogActions>
		<form class="helptext-paypal-form" action="https://www.paypal.com/donate" method="post" target="_top">
			<input type="hidden" name="hosted_button_id" value="JM5E4ANKTRESA" />
			<MatButton Type="submit">Unterstützen</MatButton>
			<img alt="" border="0" src="https://www.paypal.com/de_DE/i/scr/pixel.gif" width="1" height="1" />
		</form>
		<MatButton Id="focus-button" OnClick="@(_ => CloseDialog())">Vielleicht Später</MatButton>
	</MatDialogActions>

}
@code
{

	[Parameter]
	public Campaign? Campaign { get; set; }

	[CascadingParameter]
	public MatDialogReference DialogReference { get; set; }

	async Task CloseDialog()
	{
		DialogReference.Close(null);
	}
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await JsRuntime.InvokeVoidAsync("workaroundJs.focusElement", "focus-button");
	}
}